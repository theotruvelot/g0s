// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: pkg/proto/metric/metric.proto

package metric

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for getting metrics
type MetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostFilter    string                 `protobuf:"bytes,1,opt,name=host_filter,json=hostFilter,proto3" json:"host_filter,omitempty"` // Optional host filter
	MetricType    string                 `protobuf:"bytes,2,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"` // Optional metric type filter (cpu, ram, disk, etc)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricsRequest) Reset() {
	*x = MetricsRequest{}
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsRequest) ProtoMessage() {}

func (x *MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsRequest.ProtoReflect.Descriptor instead.
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_metric_metric_proto_rawDescGZIP(), []int{0}
}

func (x *MetricsRequest) GetHostFilter() string {
	if x != nil {
		return x.HostFilter
	}
	return ""
}

func (x *MetricsRequest) GetMetricType() string {
	if x != nil {
		return x.MetricType
	}
	return ""
}

// Response message for streaming metrics
type MetricsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricsResponse) Reset() {
	*x = MetricsResponse{}
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse) ProtoMessage() {}

func (x *MetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse.ProtoReflect.Descriptor instead.
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_metric_metric_proto_rawDescGZIP(), []int{1}
}

func (x *MetricsResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MetricsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Main metrics payload
type MetricsPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          *HostMetrics           `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Cpu           []*CPUMetrics          `protobuf:"bytes,2,rep,name=cpu,proto3" json:"cpu,omitempty"`
	Ram           *RAMMetrics            `protobuf:"bytes,3,opt,name=ram,proto3" json:"ram,omitempty"`
	Disk          []*DiskMetrics         `protobuf:"bytes,4,rep,name=disk,proto3" json:"disk,omitempty"`
	Network       []*NetworkMetrics      `protobuf:"bytes,5,rep,name=network,proto3" json:"network,omitempty"`
	Docker        []*DockerMetrics       `protobuf:"bytes,6,rep,name=docker,proto3" json:"docker,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricsPayload) Reset() {
	*x = MetricsPayload{}
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsPayload) ProtoMessage() {}

func (x *MetricsPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsPayload.ProtoReflect.Descriptor instead.
func (*MetricsPayload) Descriptor() ([]byte, []int) {
	return file_pkg_proto_metric_metric_proto_rawDescGZIP(), []int{2}
}

func (x *MetricsPayload) GetHost() *HostMetrics {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *MetricsPayload) GetCpu() []*CPUMetrics {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *MetricsPayload) GetRam() *RAMMetrics {
	if x != nil {
		return x.Ram
	}
	return nil
}

func (x *MetricsPayload) GetDisk() []*DiskMetrics {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *MetricsPayload) GetNetwork() []*NetworkMetrics {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *MetricsPayload) GetDocker() []*DockerMetrics {
	if x != nil {
		return x.Docker
	}
	return nil
}

func (x *MetricsPayload) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Host metrics
type HostMetrics struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Hostname             string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Uptime               uint64                 `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Procs                uint64                 `protobuf:"varint,3,opt,name=procs,proto3" json:"procs,omitempty"`
	Os                   string                 `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
	Platform             string                 `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	PlatformFamily       string                 `protobuf:"bytes,6,opt,name=platform_family,json=platformFamily,proto3" json:"platform_family,omitempty"`
	PlatformVersion      string                 `protobuf:"bytes,7,opt,name=platform_version,json=platformVersion,proto3" json:"platform_version,omitempty"`
	VirtualizationSystem string                 `protobuf:"bytes,8,opt,name=virtualization_system,json=virtualizationSystem,proto3" json:"virtualization_system,omitempty"`
	VirtualizationRole   string                 `protobuf:"bytes,9,opt,name=virtualization_role,json=virtualizationRole,proto3" json:"virtualization_role,omitempty"`
	KernelVersion        string                 `protobuf:"bytes,10,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *HostMetrics) Reset() {
	*x = HostMetrics{}
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMetrics) ProtoMessage() {}

func (x *HostMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMetrics.ProtoReflect.Descriptor instead.
func (*HostMetrics) Descriptor() ([]byte, []int) {
	return file_pkg_proto_metric_metric_proto_rawDescGZIP(), []int{3}
}

func (x *HostMetrics) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostMetrics) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *HostMetrics) GetProcs() uint64 {
	if x != nil {
		return x.Procs
	}
	return 0
}

func (x *HostMetrics) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *HostMetrics) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *HostMetrics) GetPlatformFamily() string {
	if x != nil {
		return x.PlatformFamily
	}
	return ""
}

func (x *HostMetrics) GetPlatformVersion() string {
	if x != nil {
		return x.PlatformVersion
	}
	return ""
}

func (x *HostMetrics) GetVirtualizationSystem() string {
	if x != nil {
		return x.VirtualizationSystem
	}
	return ""
}

func (x *HostMetrics) GetVirtualizationRole() string {
	if x != nil {
		return x.VirtualizationRole
	}
	return ""
}

func (x *HostMetrics) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

// CPU metrics
type CPUMetrics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Model         string                 `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Cores         int32                  `protobuf:"varint,2,opt,name=cores,proto3" json:"cores,omitempty"`
	Threads       int32                  `protobuf:"varint,3,opt,name=threads,proto3" json:"threads,omitempty"`
	FrequencyMhz  float64                `protobuf:"fixed64,4,opt,name=frequency_mhz,json=frequencyMhz,proto3" json:"frequency_mhz,omitempty"`
	UsagePercent  float64                `protobuf:"fixed64,5,opt,name=usage_percent,json=usagePercent,proto3" json:"usage_percent,omitempty"`
	UserTime      float64                `protobuf:"fixed64,6,opt,name=user_time,json=userTime,proto3" json:"user_time,omitempty"`
	SystemTime    float64                `protobuf:"fixed64,7,opt,name=system_time,json=systemTime,proto3" json:"system_time,omitempty"`
	IdleTime      float64                `protobuf:"fixed64,8,opt,name=idle_time,json=idleTime,proto3" json:"idle_time,omitempty"`
	CoreId        int32                  `protobuf:"varint,9,opt,name=core_id,json=coreId,proto3" json:"core_id,omitempty"`
	IsTotal       bool                   `protobuf:"varint,10,opt,name=is_total,json=isTotal,proto3" json:"is_total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPUMetrics) Reset() {
	*x = CPUMetrics{}
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPUMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUMetrics) ProtoMessage() {}

func (x *CPUMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUMetrics.ProtoReflect.Descriptor instead.
func (*CPUMetrics) Descriptor() ([]byte, []int) {
	return file_pkg_proto_metric_metric_proto_rawDescGZIP(), []int{4}
}

func (x *CPUMetrics) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CPUMetrics) GetCores() int32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *CPUMetrics) GetThreads() int32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

func (x *CPUMetrics) GetFrequencyMhz() float64 {
	if x != nil {
		return x.FrequencyMhz
	}
	return 0
}

func (x *CPUMetrics) GetUsagePercent() float64 {
	if x != nil {
		return x.UsagePercent
	}
	return 0
}

func (x *CPUMetrics) GetUserTime() float64 {
	if x != nil {
		return x.UserTime
	}
	return 0
}

func (x *CPUMetrics) GetSystemTime() float64 {
	if x != nil {
		return x.SystemTime
	}
	return 0
}

func (x *CPUMetrics) GetIdleTime() float64 {
	if x != nil {
		return x.IdleTime
	}
	return 0
}

func (x *CPUMetrics) GetCoreId() int32 {
	if x != nil {
		return x.CoreId
	}
	return 0
}

func (x *CPUMetrics) GetIsTotal() bool {
	if x != nil {
		return x.IsTotal
	}
	return false
}

// RAM metrics
type RAMMetrics struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TotalOctets     uint64                 `protobuf:"varint,1,opt,name=total_octets,json=totalOctets,proto3" json:"total_octets,omitempty"`
	UsedOctets      uint64                 `protobuf:"varint,2,opt,name=used_octets,json=usedOctets,proto3" json:"used_octets,omitempty"`
	FreeOctets      uint64                 `protobuf:"varint,3,opt,name=free_octets,json=freeOctets,proto3" json:"free_octets,omitempty"`
	UsedPercent     float64                `protobuf:"fixed64,4,opt,name=used_percent,json=usedPercent,proto3" json:"used_percent,omitempty"`
	AvailableOctets uint64                 `protobuf:"varint,5,opt,name=available_octets,json=availableOctets,proto3" json:"available_octets,omitempty"`
	SwapTotalOctets uint64                 `protobuf:"varint,6,opt,name=swap_total_octets,json=swapTotalOctets,proto3" json:"swap_total_octets,omitempty"`
	SwapUsedOctets  uint64                 `protobuf:"varint,7,opt,name=swap_used_octets,json=swapUsedOctets,proto3" json:"swap_used_octets,omitempty"`
	SwapUsedPercent float64                `protobuf:"fixed64,8,opt,name=swap_used_percent,json=swapUsedPercent,proto3" json:"swap_used_percent,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RAMMetrics) Reset() {
	*x = RAMMetrics{}
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RAMMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RAMMetrics) ProtoMessage() {}

func (x *RAMMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RAMMetrics.ProtoReflect.Descriptor instead.
func (*RAMMetrics) Descriptor() ([]byte, []int) {
	return file_pkg_proto_metric_metric_proto_rawDescGZIP(), []int{5}
}

func (x *RAMMetrics) GetTotalOctets() uint64 {
	if x != nil {
		return x.TotalOctets
	}
	return 0
}

func (x *RAMMetrics) GetUsedOctets() uint64 {
	if x != nil {
		return x.UsedOctets
	}
	return 0
}

func (x *RAMMetrics) GetFreeOctets() uint64 {
	if x != nil {
		return x.FreeOctets
	}
	return 0
}

func (x *RAMMetrics) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

func (x *RAMMetrics) GetAvailableOctets() uint64 {
	if x != nil {
		return x.AvailableOctets
	}
	return 0
}

func (x *RAMMetrics) GetSwapTotalOctets() uint64 {
	if x != nil {
		return x.SwapTotalOctets
	}
	return 0
}

func (x *RAMMetrics) GetSwapUsedOctets() uint64 {
	if x != nil {
		return x.SwapUsedOctets
	}
	return 0
}

func (x *RAMMetrics) GetSwapUsedPercent() float64 {
	if x != nil {
		return x.SwapUsedPercent
	}
	return 0
}

// Disk metrics
type DiskMetrics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Device        string                 `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Fstype        string                 `protobuf:"bytes,3,opt,name=fstype,proto3" json:"fstype,omitempty"`
	Total         uint64                 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Used          uint64                 `protobuf:"varint,5,opt,name=used,proto3" json:"used,omitempty"`
	Free          uint64                 `protobuf:"varint,6,opt,name=free,proto3" json:"free,omitempty"`
	UsedPercent   float64                `protobuf:"fixed64,7,opt,name=used_percent,json=usedPercent,proto3" json:"used_percent,omitempty"`
	ReadCount     uint64                 `protobuf:"varint,8,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`
	WriteCount    uint64                 `protobuf:"varint,9,opt,name=write_count,json=writeCount,proto3" json:"write_count,omitempty"`
	ReadOctets    uint64                 `protobuf:"varint,10,opt,name=read_octets,json=readOctets,proto3" json:"read_octets,omitempty"`
	WriteOctets   uint64                 `protobuf:"varint,11,opt,name=write_octets,json=writeOctets,proto3" json:"write_octets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskMetrics) Reset() {
	*x = DiskMetrics{}
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskMetrics) ProtoMessage() {}

func (x *DiskMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskMetrics.ProtoReflect.Descriptor instead.
func (*DiskMetrics) Descriptor() ([]byte, []int) {
	return file_pkg_proto_metric_metric_proto_rawDescGZIP(), []int{6}
}

func (x *DiskMetrics) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DiskMetrics) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DiskMetrics) GetFstype() string {
	if x != nil {
		return x.Fstype
	}
	return ""
}

func (x *DiskMetrics) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DiskMetrics) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *DiskMetrics) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *DiskMetrics) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

func (x *DiskMetrics) GetReadCount() uint64 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *DiskMetrics) GetWriteCount() uint64 {
	if x != nil {
		return x.WriteCount
	}
	return 0
}

func (x *DiskMetrics) GetReadOctets() uint64 {
	if x != nil {
		return x.ReadOctets
	}
	return 0
}

func (x *DiskMetrics) GetWriteOctets() uint64 {
	if x != nil {
		return x.WriteOctets
	}
	return 0
}

// Network metrics
type NetworkMetrics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterfaceName string                 `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	BytesSent     uint64                 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	BytesRecv     uint64                 `protobuf:"varint,3,opt,name=bytes_recv,json=bytesRecv,proto3" json:"bytes_recv,omitempty"`
	PacketsSent   uint64                 `protobuf:"varint,4,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`
	PacketsRecv   uint64                 `protobuf:"varint,5,opt,name=packets_recv,json=packetsRecv,proto3" json:"packets_recv,omitempty"`
	ErrIn         uint64                 `protobuf:"varint,6,opt,name=err_in,json=errIn,proto3" json:"err_in,omitempty"`
	ErrOut        uint64                 `protobuf:"varint,7,opt,name=err_out,json=errOut,proto3" json:"err_out,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkMetrics) Reset() {
	*x = NetworkMetrics{}
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMetrics) ProtoMessage() {}

func (x *NetworkMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMetrics.ProtoReflect.Descriptor instead.
func (*NetworkMetrics) Descriptor() ([]byte, []int) {
	return file_pkg_proto_metric_metric_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkMetrics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *NetworkMetrics) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *NetworkMetrics) GetBytesRecv() uint64 {
	if x != nil {
		return x.BytesRecv
	}
	return 0
}

func (x *NetworkMetrics) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *NetworkMetrics) GetPacketsRecv() uint64 {
	if x != nil {
		return x.PacketsRecv
	}
	return 0
}

func (x *NetworkMetrics) GetErrIn() uint64 {
	if x != nil {
		return x.ErrIn
	}
	return 0
}

func (x *NetworkMetrics) GetErrOut() uint64 {
	if x != nil {
		return x.ErrOut
	}
	return 0
}

// Docker metrics
type DockerMetrics struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ContainerId    string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ContainerName  string                 `protobuf:"bytes,2,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	Image          string                 `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	ImageId        string                 `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ImageName      string                 `protobuf:"bytes,5,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	ImageTag       string                 `protobuf:"bytes,6,opt,name=image_tag,json=imageTag,proto3" json:"image_tag,omitempty"`
	ImageDigest    string                 `protobuf:"bytes,7,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	ImageSize      string                 `protobuf:"bytes,8,opt,name=image_size,json=imageSize,proto3" json:"image_size,omitempty"`
	CpuMetrics     *CPUMetrics            `protobuf:"bytes,9,opt,name=cpu_metrics,json=cpuMetrics,proto3" json:"cpu_metrics,omitempty"`
	RamMetrics     *RAMMetrics            `protobuf:"bytes,10,opt,name=ram_metrics,json=ramMetrics,proto3" json:"ram_metrics,omitempty"`
	DiskMetrics    *DiskMetrics           `protobuf:"bytes,11,opt,name=disk_metrics,json=diskMetrics,proto3" json:"disk_metrics,omitempty"`
	NetworkMetrics *NetworkMetrics        `protobuf:"bytes,12,opt,name=network_metrics,json=networkMetrics,proto3" json:"network_metrics,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DockerMetrics) Reset() {
	*x = DockerMetrics{}
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerMetrics) ProtoMessage() {}

func (x *DockerMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_metric_metric_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerMetrics.ProtoReflect.Descriptor instead.
func (*DockerMetrics) Descriptor() ([]byte, []int) {
	return file_pkg_proto_metric_metric_proto_rawDescGZIP(), []int{8}
}

func (x *DockerMetrics) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *DockerMetrics) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *DockerMetrics) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DockerMetrics) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *DockerMetrics) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *DockerMetrics) GetImageTag() string {
	if x != nil {
		return x.ImageTag
	}
	return ""
}

func (x *DockerMetrics) GetImageDigest() string {
	if x != nil {
		return x.ImageDigest
	}
	return ""
}

func (x *DockerMetrics) GetImageSize() string {
	if x != nil {
		return x.ImageSize
	}
	return ""
}

func (x *DockerMetrics) GetCpuMetrics() *CPUMetrics {
	if x != nil {
		return x.CpuMetrics
	}
	return nil
}

func (x *DockerMetrics) GetRamMetrics() *RAMMetrics {
	if x != nil {
		return x.RamMetrics
	}
	return nil
}

func (x *DockerMetrics) GetDiskMetrics() *DiskMetrics {
	if x != nil {
		return x.DiskMetrics
	}
	return nil
}

func (x *DockerMetrics) GetNetworkMetrics() *NetworkMetrics {
	if x != nil {
		return x.NetworkMetrics
	}
	return nil
}

var File_pkg_proto_metric_metric_proto protoreflect.FileDescriptor

var file_pkg_proto_metric_metric_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x0f,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xc9, 0x02, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x43, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x03,
	0x63, 0x70, 0x75, 0x12, 0x24, 0x0a, 0x03, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x52, 0x41, 0x4d, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x03, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x69, 0x73,
	0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x04, 0x64, 0x69,
	0x73, 0x6b, 0x12, 0x30, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2d, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x06, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xe4, 0x02,
	0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x63, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x13,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x02, 0x0a, 0x0a, 0x43, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x68, 0x7a, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xc1, 0x02, 0x0a, 0x0a, 0x52, 0x41, 0x4d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x4f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65,
	0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x73, 0x77, 0x61, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x70,
	0x55, 0x73, 0x65, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x55, 0x73, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x22,
	0xeb, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x15, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x49, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4f, 0x75, 0x74, 0x22, 0xeb, 0x03,
	0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x33, 0x0a,
	0x0b, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x52, 0x41, 0x4d, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x32, 0xdf, 0x01, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a,
	0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x16,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x30, 0x01, 0x42, 0x2e, 0x5a,
	0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x6f,
	0x74, 0x72, 0x75, 0x76, 0x65, 0x6c, 0x6f, 0x74, 0x2f, 0x67, 0x30, 0x73, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pkg_proto_metric_metric_proto_rawDescOnce sync.Once
	file_pkg_proto_metric_metric_proto_rawDescData []byte
)

func file_pkg_proto_metric_metric_proto_rawDescGZIP() []byte {
	file_pkg_proto_metric_metric_proto_rawDescOnce.Do(func() {
		file_pkg_proto_metric_metric_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_proto_metric_metric_proto_rawDesc), len(file_pkg_proto_metric_metric_proto_rawDesc)))
	})
	return file_pkg_proto_metric_metric_proto_rawDescData
}

var file_pkg_proto_metric_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pkg_proto_metric_metric_proto_goTypes = []any{
	(*MetricsRequest)(nil),        // 0: metric.MetricsRequest
	(*MetricsResponse)(nil),       // 1: metric.MetricsResponse
	(*MetricsPayload)(nil),        // 2: metric.MetricsPayload
	(*HostMetrics)(nil),           // 3: metric.HostMetrics
	(*CPUMetrics)(nil),            // 4: metric.CPUMetrics
	(*RAMMetrics)(nil),            // 5: metric.RAMMetrics
	(*DiskMetrics)(nil),           // 6: metric.DiskMetrics
	(*NetworkMetrics)(nil),        // 7: metric.NetworkMetrics
	(*DockerMetrics)(nil),         // 8: metric.DockerMetrics
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_pkg_proto_metric_metric_proto_depIdxs = []int32{
	3,  // 0: metric.MetricsPayload.host:type_name -> metric.HostMetrics
	4,  // 1: metric.MetricsPayload.cpu:type_name -> metric.CPUMetrics
	5,  // 2: metric.MetricsPayload.ram:type_name -> metric.RAMMetrics
	6,  // 3: metric.MetricsPayload.disk:type_name -> metric.DiskMetrics
	7,  // 4: metric.MetricsPayload.network:type_name -> metric.NetworkMetrics
	8,  // 5: metric.MetricsPayload.docker:type_name -> metric.DockerMetrics
	9,  // 6: metric.MetricsPayload.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 7: metric.DockerMetrics.cpu_metrics:type_name -> metric.CPUMetrics
	5,  // 8: metric.DockerMetrics.ram_metrics:type_name -> metric.RAMMetrics
	6,  // 9: metric.DockerMetrics.disk_metrics:type_name -> metric.DiskMetrics
	7,  // 10: metric.DockerMetrics.network_metrics:type_name -> metric.NetworkMetrics
	2,  // 11: metric.MetricService.StreamMetrics:input_type -> metric.MetricsPayload
	0,  // 12: metric.MetricService.GetMetrics:input_type -> metric.MetricsRequest
	0,  // 13: metric.MetricService.GetMetricsStream:input_type -> metric.MetricsRequest
	1,  // 14: metric.MetricService.StreamMetrics:output_type -> metric.MetricsResponse
	2,  // 15: metric.MetricService.GetMetrics:output_type -> metric.MetricsPayload
	2,  // 16: metric.MetricService.GetMetricsStream:output_type -> metric.MetricsPayload
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_pkg_proto_metric_metric_proto_init() }
func file_pkg_proto_metric_metric_proto_init() {
	if File_pkg_proto_metric_metric_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_proto_metric_metric_proto_rawDesc), len(file_pkg_proto_metric_metric_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_proto_metric_metric_proto_goTypes,
		DependencyIndexes: file_pkg_proto_metric_metric_proto_depIdxs,
		MessageInfos:      file_pkg_proto_metric_metric_proto_msgTypes,
	}.Build()
	File_pkg_proto_metric_metric_proto = out.File
	file_pkg_proto_metric_metric_proto_goTypes = nil
	file_pkg_proto_metric_metric_proto_depIdxs = nil
}
